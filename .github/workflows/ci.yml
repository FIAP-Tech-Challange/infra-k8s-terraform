name: 'Infrastructure CI/CD'

on:
  push:
    branches:
      - main

jobs:
  remote-config:
    name: 'Remote Config Setup'
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ env.DB_HOST }}
      db_user: ${{ env.DB_USER }}
      db_password: ${{ env.DB_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI if running in act
        if: env.ACT == 'true'
        run: |
          echo "Running under act, installing AWS CLI..."
          sudo apt-get update -y
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install

      - name: Get remote config from Database at Parameter Store
        run: |
          aws ssm get-parameter --name "/${{ secrets.WORKSPACE }}/rds_endpoint" --with-decryption --query "Parameter.Value" --output text >> db_host.txt
          aws ssm get-parameter --name "/${{ secrets.WORKSPACE }}/db_username" --with-decryption --query "Parameter.Value" --output text >> db_user.txt
          aws ssm get-parameter --name "/${{ secrets.WORKSPACE }}/db_password" --with-decryption --query "Parameter.Value" --output text >> db_password.txt

      - name: Set outputs
        run: |
          echo "DB_HOST=$(cat db_host.txt)" >> $GITHUB_ENV
          echo "DB_USER=$(cat db_user.txt)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(cat db_password.txt)" >> $GITHUB_ENV

  terraform:
    name: 'Infrastructure Plan/Apply'
    runs-on: ubuntu-latest
    needs: remote-config

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -no-color \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            -var="authorizer_function_name=${{ secrets.AUTHORIZER_FUNCTION_NAME }}" \
            -var="database_host=${{ needs.remote-config.outputs.db_host }}" \
            -var="database_user=${{ needs.remote-config.outputs.db_user }}" \
            -var="database_password=${{ needs.remote-config.outputs.db_password }}" \
            -var="database_port=${{ secrets.DB_PORT }}" \
            -var="database_name=${{ secrets.DB_NAME }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            -var="authorizer_function_name=${{ secrets.AUTHORIZER_FUNCTION_NAME }}" \
            -var="database_host=${{ needs.remote-config.outputs.db_host }}" \
            -var="database_user=${{ needs.remote-config.outputs.db_user }}" \
            -var="database_password=${{ needs.remote-config.outputs.db_password }}" \
            -var="database_port=${{ secrets.DB_PORT }}" \
            -var="database_name=${{ secrets.DB_NAME }}"
