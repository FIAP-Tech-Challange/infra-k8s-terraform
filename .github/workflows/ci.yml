name: "Infrastructure CI/CD"

on:
  push:
    branches:
      - main

jobs:
  bootstrap:
    name: "Bootstrap the application"
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ steps.set-outputs.outputs.db_host }}
      db_user: ${{ steps.set-outputs.outputs.db_user }}
      db_password: ${{ steps.set-outputs.outputs.db_password }}
      terraform_bucket: ${{ steps.set-outputs.outputs.terraform_bucket }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CLI if running in act
        if: env.ACT == 'true'
        run: |
          echo "Running under act, installing AWS CLI..."
          sudo apt-get update -y
          sudo apt-get install -y unzip curl less
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install

      - name: Create S3 Bucket for Terraform State
        id: bootstrap
        run: |
          BUCKET_PREFIX="terraform-state"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS Account ID: $ACCOUNT_ID"

          REGION="us-east-1"
          BUCKET_NAME="${BUCKET_PREFIX}-${ACCOUNT_ID}"
          echo "S3 bucket name: $BUCKET_NAME"

          # Check if bucket exists, create if not
          echo "Checking S3 bucket..."
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "S3 bucket '$BUCKET_NAME' already exists"
          else
            echo "Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION"
            echo "S3 bucket '$BUCKET_NAME' created successfully"
          fi

          echo "Bootstrap finished. Bucket: $BUCKET_NAME"
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Get remote config from SSM
        id: get-params
        run: |
          DB_HOST=$(aws ssm get-parameter --name "/main/rds_endpoint" --with-decryption --query "Parameter.Value" --output text)
          DB_USER=$(aws ssm get-parameter --name "/main/db_username" --with-decryption --query "Parameter.Value" --output text)
          DB_PASSWORD=$(aws ssm get-parameter --name "/main/db_password" --with-decryption --query "Parameter.Value" --output text)
          # Export so the next step can access them as env vars
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      - name: Set outputs
        id: set-outputs
        run: |
          echo "db_host=$DB_HOST" >> $GITHUB_OUTPUT
          echo "db_user=$DB_USER" >> $GITHUB_OUTPUT
          echo "db_password=$DB_PASSWORD" >> $GITHUB_OUTPUT
          echo "terraform_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT

  terraform:
    name: "Infrastructure Plan/Apply"
    runs-on: ubuntu-latest
    needs: bootstrap

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'modules/gateway/authorizer/package-lock.json'

      - name: Install Lambda Dependencies
        run: |
          cd modules/gateway/authorizer
          npm install --production

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.bootstrap.outputs.terraform_bucket }}" \
            -backend-config="region=us-east-1"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -no-color \
            -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            -var="database_host=${{ needs.bootstrap.outputs.db_host }}" \
            -var="database_user=${{ needs.bootstrap.outputs.db_user }}" \
            -var="database_password=${{ needs.bootstrap.outputs.db_password }}" \
            -var="database_port=${{ secrets.DB_PORT }}" \
            -var="database_name=${{ secrets.DB_NAME }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve \
            -var="lambda_function_name=${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            -var="database_host=${{ needs.bootstrap.outputs.db_host }}" \
            -var="database_user=${{ needs.bootstrap.outputs.db_user }}" \
            -var="database_password=${{ needs.bootstrap.outputs.db_password }}" \
            -var="database_port=${{ secrets.DB_PORT }}" \
            -var="database_name=${{ secrets.DB_NAME }}"

  configure-eks:
    name: "Configure EKS Cluster"
    runs-on: ubuntu-latest
    needs: [bootstrap, terraform]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install AWS CLI if running in act
        if: env.ACT == 'true'
        run: |
          echo "Running under act, installing AWS CLI..."
          sudo apt-get update -y
          sudo apt-get install -y unzip curl less
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.0'

      - name: Configure kubectl for EKS
        run: |
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          CLUSTER_NAME="eks-tc-3-f106"

          echo "Configuring kubectl for cluster: $CLUSTER_NAME"
          echo "AWS Account ID: $AWS_ACCOUNT_ID"

          # Update kubeconfig
          aws eks update-kubeconfig --region us-east-1 --name $CLUSTER_NAME

          # Wait for cluster to be ready
          echo "Waiting for cluster to be active..."
          aws eks wait cluster-active --region us-east-1 --name $CLUSTER_NAME

          # Apply aws-auth ConfigMap
          echo "Applying aws-auth ConfigMap..."
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: arn:aws:iam::$AWS_ACCOUNT_ID:role/LabRole
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
              - rolearn: arn:aws:iam::$AWS_ACCOUNT_ID:role/LabRole
                username: admin
                groups:
                  - system:masters
          EOF

          # Verify cluster access
          echo "Verifying cluster access..."
          kubectl get nodes
          kubectl get pods --all-namespaces
